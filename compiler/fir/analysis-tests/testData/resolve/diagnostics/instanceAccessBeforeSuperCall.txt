FILE: instanceAccessBeforeSuperCall.kt
    public final class A : R|kotlin/Any| {
        public constructor(x: R|kotlin/Int| = <Unresolved name: getSomeInt>#(), other: R|A| = this#, header: R|kotlin/String| = <Unresolved name: keker>#): R|A| {
            super<R|kotlin/Any|>()
        }

        public final fun getSomeInt(): R|kotlin/Int| {
            ^getSomeInt Int(10)
        }

        public final var keker: R|kotlin/String| = String(test)
            public get(): R|kotlin/String|
            public set(value: R|kotlin/String|): R|kotlin/Unit|

    }
    public final class B : R|kotlin/Any| {
        public constructor(other: R|B| = this#): R|B| {
            super<R|kotlin/Any|>()
        }

    }
    public final class C : R|kotlin/Any| {
        public constructor(): R|C| {
            super<R|kotlin/Any|>()
        }

        public constructor(x: R|kotlin/Int|): R|C| {
            this<R|C|>(fun <anonymous>(): R|C| {
                lval a: R|kotlin/Int| = Int(10)
                ^ this@R|/C|
            }
            )
        }

    }
    public final class D : R|kotlin/Any| {
        public final var a: R|kotlin/Int| = Int(20)
            public get(): R|kotlin/Int|
            public set(value: R|kotlin/Int|): R|kotlin/Unit|

        public constructor(): R|D| {
            super<R|kotlin/Any|>()
            this@R|/D|.R|/D.a| = Int(10)
        }

    }
    public final fun main(): R|kotlin/Unit| {
        lval x1: R|kotlin/String.() -> kotlin/String| = when () {
            Boolean(true) ->  {
                fun <anonymous>(it: R|kotlin/String|): <ERROR TYPE REF: 'this' is not defined in this context> {
                    ^ this#
                }

            }
            else ->  {
                fun <anonymous>(it: R|kotlin/String|): <ERROR TYPE REF: 'this' is not defined in this context> {
                    ^ this#
                }

            }
        }

    }
