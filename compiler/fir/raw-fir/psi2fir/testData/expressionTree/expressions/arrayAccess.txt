FILE: arrayAccess.kt
    public? final? val p: <implicit> = IntegerLiteral(0)
        public? get(): <implicit>
    public? final? fun foo(): <implicit> {
        ^foo IntegerLiteral(1)
    }
    public? final? class Wrapper : R|kotlin/Any| {
        public? [ContainingClassKey=Wrapper] constructor(v: IntArray): R|Wrapper| {
            super<R|kotlin/Any|>()
        }

        public? final? [IsFromPrimaryConstructor=true] val v: IntArray = R|<local>/v|
            public? get(): IntArray

    }
    public? final? fun expressionTree(block: ( () -> Unit )): R|kotlin/Unit| {
        TODO#(String(intrinsic))
    }
    public? final? fun test(a: IntArray, w: Wrapper): <implicit> {
        ^test firBlock#(listOf#(), listOf#(firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firNull#(), firSimpleNamedReference#(firString#(String("a")))), firSimpleNamedReference#(firString#(String("get")))), firSimpleNamedReference#(firString#(String("plus")))), firSimpleNamedReference#(firString#(String("plus")))), firSimpleNamedReference#(firString#(String("plus"))))))
    }
