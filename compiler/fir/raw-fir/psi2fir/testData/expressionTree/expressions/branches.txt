FILE: branches.kt
    public? final? fun foo(a: Int, b: Int): <implicit> {
        ^foo firBlock#(listOf#(), listOf#(firWhenExpression#(listOf#(), firNull#(), firNull#(), listOf#(firWhenBranch#(firComparisonExpression#(listOf#(), firOperation_GT#(), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firNull#(), firSimpleNamedReference#(firString#(String("a")))), firSimpleNamedReference#(firString#(String("compareTo"))))), firBlock#(listOf#(), listOf#(firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firNull#(), firSimpleNamedReference#(firString#(String("a"))))))), firWhenBranch#(firElseIfTrueCondition#(listOf#()), firBlock#(listOf#(), listOf#(firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firNull#(), firSimpleNamedReference#(firString#(String("b")))))))), firFalse#())))
    }
    public? final? fun expressionTree(block: ( () -> Unit )): R|kotlin/Unit| {
        TODO#(String(intrinsic))
    }
    public? final? fun bar(a: Double, b: Double): <implicit> {
        ^bar firBlock#(listOf#(), listOf#(firWhenExpression#(listOf#(), firNull#(), firNull#(), listOf#(firWhenBranch#(firComparisonExpression#(listOf#(), firOperation_GT#(), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firNull#(), firSimpleNamedReference#(firString#(String("a")))), firSimpleNamedReference#(firString#(String("compareTo"))))), firBlock#(listOf#(), listOf#(firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firNull#(), firSimpleNamedReference#(firString#(String("println")))), firReturnExpression#(listOf#(), firFunctionTarget#(firString#(String("bar")), firFalse#()), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firNull#(), firSimpleNamedReference#(firString#(String("a")))))))), firWhenBranch#(firElseIfTrueCondition#(listOf#()), firBlock#(listOf#(), listOf#(firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firNull#(), firSimpleNamedReference#(firString#(String("println")))), firReturnExpression#(listOf#(), firFunctionTarget#(firString#(String("bar")), firFalse#()), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firNull#(), firSimpleNamedReference#(firString#(String("b"))))))))), firFalse#())))
    }
    public? final? fun baz(a: Long, b: Long): <implicit> {
        ^baz firBlock#(listOf#(), listOf#(firWhenExpression#(listOf#(), firNull#(), firNull#(), listOf#(firWhenBranch#(firComparisonExpression#(listOf#(), firOperation_GT#(), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firNull#(), firSimpleNamedReference#(firString#(String("a")))), firSimpleNamedReference#(firString#(String("compareTo"))))), firBlock#(listOf#(), listOf#(firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firNull#(), firSimpleNamedReference#(firString#(String("println")))), firReturnExpression#(listOf#(), firFunctionTarget#(firString#(String("baz")), firFalse#()), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firNull#(), firSimpleNamedReference#(firString#(String("a")))))))), firWhenBranch#(firElseIfTrueCondition#(listOf#()), firBlock#(listOf#(), listOf#(firReturnExpression#(listOf#(), firFunctionTarget#(firString#(String("baz")), firFalse#()), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firNull#(), firSimpleNamedReference#(firString#(String("b"))))))))), firFalse#())))
    }
    public? final? fun grade(g: Int): <implicit> {
        ^grade firBlock#(listOf#(), listOf#(firReturnExpression#(listOf#(), firFunctionTarget#(firString#(String("grade")), firFalse#()), firWhenExpression#(listOf#(), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firNull#(), firSimpleNamedReference#(firString#(String("g")))), firNull#(), listOf#(firWhenBranch#(firBinaryLogicExpression#(listOf#(), firEqualityOperatorCall#(listOf#(), listOf#(firWhenSubjectExpression#(listOf#()), firIntegerLiteral#(IntegerLiteral(6))), firOperation_EQ#()), firEqualityOperatorCall#(listOf#(), listOf#(firWhenSubjectExpression#(listOf#()), firIntegerLiteral#(IntegerLiteral(7))), firOperation_EQ#()), firLogicOperationKind_OR#()), firBlock#(listOf#(), listOf#(firString#(String(Outstanding))))), firWhenBranch#(firEqualityOperatorCall#(listOf#(), listOf#(firWhenSubjectExpression#(listOf#()), firIntegerLiteral#(IntegerLiteral(5))), firOperation_EQ#()), firBlock#(listOf#(), listOf#(firString#(String(Excellent))))), firWhenBranch#(firEqualityOperatorCall#(listOf#(), listOf#(firWhenSubjectExpression#(listOf#()), firIntegerLiteral#(IntegerLiteral(4))), firOperation_EQ#()), firBlock#(listOf#(), listOf#(firString#(String(Good))))), firWhenBranch#(firEqualityOperatorCall#(listOf#(), listOf#(firWhenSubjectExpression#(listOf#()), firIntegerLiteral#(IntegerLiteral(3))), firOperation_EQ#()), firBlock#(listOf#(), listOf#(firString#(String(Mediocre))))), firWhenBranch#(firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firIntegerLiteral#(IntegerLiteral(1)), firSimpleNamedReference#(firString#(String("rangeTo")))), firSimpleNamedReference#(firString#(String("contains")))), firBlock#(listOf#(), listOf#(firString#(String(Fail))))), firWhenBranch#(firTypeOperatorCall#(listOf#(), listOf#(firWhenSubjectExpression#(listOf#())), firOperation_IS#(), firUserTypeRef#(listOf#(), firFalse#(), listOf#(firQualifierPart#(firString#(String("Number")), listOf#())))), firBlock#(listOf#(), listOf#(firString#(String(Number))))), firWhenBranch#(firElseIfTrueCondition#(listOf#()), firBlock#(listOf#(), listOf#(firString#(String(Unknown)))))), firTrue#()))))
    }
