FILE: branches.kt
    public? final? fun foo(a: Int, b: Int): <implicit> {
        ^foo firBlock#(listOf#(), listOf#(firWhenExpression#(listOf#(), Null(null), Null(null), listOf#(firWhenBranch#(firComparisonExpression#(listOf#(), firOperation_GT#(), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), Null(null), firSimpleNamedReference#(String("a"))), firSimpleNamedReference#(String("compareTo")))), firBlock#(listOf#(), listOf#(firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), Null(null), firSimpleNamedReference#(String("a")))))), firWhenBranch#(firElseIfTrueCondition#(listOf#()), firBlock#(listOf#(), listOf#(firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), Null(null), firSimpleNamedReference#(String("b"))))))), Boolean(false))))
    }
    public? final? fun expressionTree(block: ( () -> Unit )): R|kotlin/Unit| {
        TODO#(String(intrinsic))
    }
    public? final? fun bar(a: Double, b: Double): <implicit> {
        ^bar firBlock#(listOf#(), listOf#(firWhenExpression#(listOf#(), Null(null), Null(null), listOf#(firWhenBranch#(firComparisonExpression#(listOf#(), firOperation_GT#(), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), Null(null), firSimpleNamedReference#(String("a"))), firSimpleNamedReference#(String("compareTo")))), firBlock#(listOf#(), listOf#(firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), Null(null), firSimpleNamedReference#(String("println"))), firReturnExpression#(listOf#(), firFunctionTarget#(String("bar"), Boolean(false)), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), Null(null), firSimpleNamedReference#(String("a"))))))), firWhenBranch#(firElseIfTrueCondition#(listOf#()), firBlock#(listOf#(), listOf#(firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), Null(null), firSimpleNamedReference#(String("println"))), firReturnExpression#(listOf#(), firFunctionTarget#(String("bar"), Boolean(false)), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), Null(null), firSimpleNamedReference#(String("b")))))))), Boolean(false))))
    }
    public? final? fun baz(a: Long, b: Long): <implicit> {
        ^baz firBlock#(listOf#(), listOf#(firWhenExpression#(listOf#(), Null(null), Null(null), listOf#(firWhenBranch#(firComparisonExpression#(listOf#(), firOperation_GT#(), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), Null(null), firSimpleNamedReference#(String("a"))), firSimpleNamedReference#(String("compareTo")))), firBlock#(listOf#(), listOf#(firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), Null(null), firSimpleNamedReference#(String("println"))), firReturnExpression#(listOf#(), firFunctionTarget#(String("baz"), Boolean(false)), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), Null(null), firSimpleNamedReference#(String("a"))))))), firWhenBranch#(firElseIfTrueCondition#(listOf#()), firBlock#(listOf#(), listOf#(firReturnExpression#(listOf#(), firFunctionTarget#(String("baz"), Boolean(false)), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), Null(null), firSimpleNamedReference#(String("b")))))))), Boolean(false))))
    }
    public? final? fun grade(g: Int): <implicit> {
        ^grade firBlock#(listOf#(), listOf#(firReturnExpression#(listOf#(), firFunctionTarget#(String("grade"), Boolean(false)), firWhenExpression#(listOf#(), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), Null(null), firSimpleNamedReference#(String("g"))), Null(null), listOf#(firWhenBranch#(firBinaryLogicExpression#(listOf#(), firEqualityOperatorCall#(listOf#(), listOf#(firWhenSubjectExpression#(listOf#()), firIntegerLiteral#(IntegerLiteral(6))), firOperation_EQ#()), firEqualityOperatorCall#(listOf#(), listOf#(firWhenSubjectExpression#(listOf#()), firIntegerLiteral#(IntegerLiteral(7))), firOperation_EQ#()), firLogicOperationKind_OR#()), firBlock#(listOf#(), listOf#(firString#(String(Outstanding))))), firWhenBranch#(firEqualityOperatorCall#(listOf#(), listOf#(firWhenSubjectExpression#(listOf#()), firIntegerLiteral#(IntegerLiteral(5))), firOperation_EQ#()), firBlock#(listOf#(), listOf#(firString#(String(Excellent))))), firWhenBranch#(firEqualityOperatorCall#(listOf#(), listOf#(firWhenSubjectExpression#(listOf#()), firIntegerLiteral#(IntegerLiteral(4))), firOperation_EQ#()), firBlock#(listOf#(), listOf#(firString#(String(Good))))), firWhenBranch#(firEqualityOperatorCall#(listOf#(), listOf#(firWhenSubjectExpression#(listOf#()), firIntegerLiteral#(IntegerLiteral(3))), firOperation_EQ#()), firBlock#(listOf#(), listOf#(firString#(String(Mediocre))))), firWhenBranch#(firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firIntegerLiteral#(IntegerLiteral(1)), firSimpleNamedReference#(String("rangeTo"))), firSimpleNamedReference#(String("contains"))), firBlock#(listOf#(), listOf#(firString#(String(Fail))))), firWhenBranch#(firTypeOperatorCall#(listOf#(), listOf#(firWhenSubjectExpression#(listOf#())), firOperation_IS#(), firUserTypeRef#(listOf#(), Boolean(false), listOf#(firQualifierPart#(String("Number"), listOf#())))), firBlock#(listOf#(), listOf#(firString#(String(Number))))), firWhenBranch#(firElseIfTrueCondition#(listOf#()), firBlock#(listOf#(), listOf#(firString#(String(Unknown)))))), Boolean(true)))))
    }
