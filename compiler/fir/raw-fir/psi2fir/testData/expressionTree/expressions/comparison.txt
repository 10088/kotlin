FILE: comparison.kt
    public? final? fun expressionTree(block: ( () -> Unit )): R|kotlin/Unit| {
        TODO#()
    }
    public? final? val f: <implicit> = firBlock#(listOf#(), listOf#(firWhenExpression#(listOf#(), Null(null), Null(null), listOf#(firWhenBranch#(firEqualityOperatorCall#(listOf#(), listOf#(firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), Null(null), firSimpleNamedReference#(String(uCullMode))), firDouble#(Double(0.0))), firOperation_EQ#()), firBlock#(listOf#(), listOf#(firDouble#(Double(1.0))))), firWhenBranch#(firElseIfTrueCondition#(listOf#()), firBlock#(listOf#(), listOf#(firWhenExpression#(listOf#(), Null(null), Null(null), listOf#(firWhenBranch#(firComparisonExpression#(listOf#(), firOperation_GT_EQ#(), firFunctionCall#(listOf#(), listOf#(), firFunctionCall#(listOf#(), listOf#(), Null(null), firNoReceiverExpression#(), firNoReceiverExpression#(), listOf#(firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), Null(null), firSimpleNamedReference#(String(position))), firFunctionCall#(listOf#(), listOf#(), Null(null), firNoReceiverExpression#(), firNoReceiverExpression#(), listOf#(), firSimpleNamedReference#(String(fNormal)))), firSimpleNamedReference#(String(fFaceDirection))), firNoReceiverExpression#(), firNoReceiverExpression#(), listOf#(firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), Null(null), firSimpleNamedReference#(String(uCullMode)))), firSimpleNamedReference#(String(times))), listOf#(firDouble#(Double(0.0)))), firBlock#(listOf#(), listOf#(firDouble#(Double(1.0))))), firWhenBranch#(firElseIfTrueCondition#(listOf#()), firBlock#(listOf#(), listOf#(firDouble#(Double(0.0)))))), Boolean(false)))))), Boolean(false))))
        public? get(): <implicit>
