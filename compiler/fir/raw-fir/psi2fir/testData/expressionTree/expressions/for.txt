FILE: for.kt
    public? final? fun foo(): <implicit> {
        ^foo firBlock#(listOf#(), listOf#(firBlock#(listOf#(), listOf#(firProperty#(listOf#(), firNull#(), firString#(String("<iterator>")), firImplicitTypeRef#(), firFalse#(), firTrue#(), firNull#(), firNull#()), firWhileLoop#(listOf#(), firNull#(), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firNull#(), firNamedReference#(firString#(String("<iterator>")))), firSimpleNamedReference#(firString#(String("hasNext")))), firBlock#(listOf#(), listOf#(firProperty#(listOf#(), firNull#(), firString#(String("i")), firImplicitTypeRef#(), firFalse#(), firTrue#(), firNull#(), firNull#()), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firNull#(), firSimpleNamedReference#(firString#(String("println")))))))))))
    }
    public? final? fun expressionTree(block: ( () -> Unit )): R|kotlin/Unit| {
        TODO#(String(intrinsic))
    }
    public? final? fun fooLabeled(): <implicit> {
        ^fooLabeled firBlock#(listOf#(), listOf#(firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firNull#(), firSimpleNamedReference#(firString#(String("println")))), firBlock#(listOf#(), listOf#(firProperty#(listOf#(), firNull#(), firString#(String("<iterator>")), firImplicitTypeRef#(), firFalse#(), firTrue#(), firNull#(), firNull#()), firWhileLoop#(listOf#(), firLabel#(firString#(String("label"))), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firNull#(), firNamedReference#(firString#(String("<iterator>")))), firSimpleNamedReference#(firString#(String("hasNext")))), firBlock#(listOf#(), listOf#(firProperty#(listOf#(), firNull#(), firString#(String("i")), firImplicitTypeRef#(), firFalse#(), firTrue#(), firNull#(), firNull#()), firWhenExpression#(listOf#(), firNull#(), firNull#(), listOf#(firWhenBranch#(firEqualityOperatorCall#(listOf#(), listOf#(firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firNull#(), firSimpleNamedReference#(firString#(String("i")))), firIntegerLiteral#(IntegerLiteral(5))), firOperation_EQ#()), firBlock#(listOf#(), listOf#(firContinueExpression#(listOf#()))))), firFalse#()), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firNull#(), firSimpleNamedReference#(firString#(String("println"))))))))), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firNull#(), firSimpleNamedReference#(firString#(String("println"))))))
    }
    public? final? fun bar(list: List<String>): <implicit> {
        ^bar firBlock#(listOf#(), listOf#(firBlock#(listOf#(), listOf#(firProperty#(listOf#(), firNull#(), firString#(String("<iterator>")), firImplicitTypeRef#(), firFalse#(), firTrue#(), firNull#(), firNull#()), firWhileLoop#(listOf#(), firNull#(), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firNull#(), firNamedReference#(firString#(String("<iterator>")))), firSimpleNamedReference#(firString#(String("hasNext")))), firBlock#(listOf#(), listOf#(firProperty#(listOf#(), firNull#(), firString#(String("element")), firImplicitTypeRef#(), firFalse#(), firTrue#(), firNull#(), firNull#()), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firNull#(), firSimpleNamedReference#(firString#(String("println"))))))))), firBlock#(listOf#(), listOf#(firProperty#(listOf#(), firNull#(), firString#(String("<iterator>")), firImplicitTypeRef#(), firFalse#(), firTrue#(), firNull#(), firNull#()), firWhileLoop#(listOf#(), firNull#(), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firNull#(), firNamedReference#(firString#(String("<iterator>")))), firSimpleNamedReference#(firString#(String("hasNext")))), firBlock#(listOf#(), listOf#(firProperty#(listOf#(), firNull#(), firString#(String("element")), firImplicitTypeRef#(), firFalse#(), firTrue#(), firNull#(), firNull#()), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firNull#(), firSimpleNamedReference#(firString#(String("println")))))))))))
    }
    public? final? data class Some : R|kotlin/Any| {
        public? [ContainingClassKey=Some] constructor(x: Int, y: Int): R|Some| {
            super<R|kotlin/Any|>()
        }

        public? final? [IsFromPrimaryConstructor=true] val x: Int = R|<local>/x|
            public? get(): Int

        public? final? [IsFromPrimaryConstructor=true] val y: Int = R|<local>/y|
            public? get(): Int

        public final operator fun component1(): Int

        public final operator fun component2(): Int

        public final fun copy(x: Int = this@R|/Some|.R|/Some.x|, y: Int = this@R|/Some|.R|/Some.y|): R|Some|

    }
    public? final? fun baz(set: Set<Some>): <implicit> {
        ^baz firBlock#(listOf#(), listOf#(firBlock#(listOf#(), listOf#(firProperty#(listOf#(), firNull#(), firString#(String("<iterator>")), firImplicitTypeRef#(), firFalse#(), firTrue#(), firNull#(), firNull#()), firWhileLoop#(listOf#(), firNull#(), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firNull#(), firNamedReference#(firString#(String("<iterator>")))), firSimpleNamedReference#(firString#(String("hasNext")))), firBlock#(listOf#(), listOf#(firProperty#(listOf#(), firNull#(), firString#(String("<destruct>")), firImplicitTypeRef#(), firFalse#(), firTrue#(), firNull#(), firNull#()), firProperty#(listOf#(), firNull#(), firString#(String("x")), firImplicitTypeRef#(), firFalse#(), firTrue#(), firNull#(), firNull#()), firProperty#(listOf#(), firNull#(), firString#(String("y")), firImplicitTypeRef#(), firFalse#(), firTrue#(), firNull#(), firNull#()), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firNull#(), firSimpleNamedReference#(firString#(String("println")))))))))))
    }
    public? final? fun withParameter(list: List<Some>): <implicit> {
        ^withParameter firBlock#(listOf#(), listOf#(firBlock#(listOf#(), listOf#(firProperty#(listOf#(), firNull#(), firString#(String("<iterator>")), firImplicitTypeRef#(), firFalse#(), firTrue#(), firNull#(), firNull#()), firWhileLoop#(listOf#(), firNull#(), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firNull#(), firNamedReference#(firString#(String("<iterator>")))), firSimpleNamedReference#(firString#(String("hasNext")))), firBlock#(listOf#(), listOf#(firProperty#(listOf#(), firNull#(), firString#(String("s")), firUserTypeRef#(listOf#(), firFalse#(), listOf#(firQualifierPart#(firString#(String("Some")), listOf#()))), firFalse#(), firTrue#(), firNull#(), firNull#()), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), firNull#(), firSimpleNamedReference#(firString#(String("println")))))))))))
    }
