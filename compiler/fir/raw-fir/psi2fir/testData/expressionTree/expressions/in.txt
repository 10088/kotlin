FILE: in.kt
    public? final? fun foo(x: Int, y: Int, c: Collection<Int>): <implicit> {
        ^foo firBlock#(listOf#(), listOf#(firBinaryLogicExpression#(listOf#(), firFunctionCall#(listOf#(), listOf#(), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), Null(null), firSimpleNamedReference#(String(c))), firNoReceiverExpression#(), firNoReceiverExpression#(), listOf#(firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), Null(null), firSimpleNamedReference#(String(x)))), firSimpleNamedReference#(String(contains))), firFunctionCall#(listOf#(), listOf#(), firFunctionCall#(listOf#(), listOf#(), firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), Null(null), firSimpleNamedReference#(String(c))), firNoReceiverExpression#(), firNoReceiverExpression#(), listOf#(firQualifiedAccessExpression#(listOf#(), listOf#(), firNoReceiverExpression#(), firNoReceiverExpression#(), Null(null), firSimpleNamedReference#(String(y)))), firSimpleNamedReference#(String(contains))), firNoReceiverExpression#(), firNoReceiverExpression#(), listOf#(), firSimpleNamedReference#(String(not))), firLogicOperationKind_AND#())))
    }
    public? final? fun expressionTree(block: ( () -> Unit )): R|kotlin/Unit| {
        TODO#(String(intrinsic))
    }
