package

public fun </*0*/ R> background(/*0*/ @kotlin.native.concurrent.Frozen param: kotlin.Any? = ..., /*1*/ @kotlin.native.concurrent.Frozen block: () -> R): R
public fun test(): kotlin.Unit

public final class Mutable {
    public constructor Mutable(/*0*/ state: kotlin.String)
    public final var state: kotlin.String
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class TransitivelyMutable1 {
    public constructor TransitivelyMutable1(/*0*/ cause: Mutable)
    public final val cause: Mutable
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class TransitivelyMutable2 {
    public constructor TransitivelyMutable2(/*0*/ cause: TransitivelyMutable1)
    public final val cause: TransitivelyMutable1
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class TransitivelyMutable3 {
    public constructor TransitivelyMutable3(/*0*/ cause: TransitivelyMutable2)
    public final val cause: TransitivelyMutable2
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

package kotlin {

    package kotlin.native {

        package kotlin.native.concurrent {

            @kotlin.annotation.Target(allowedTargets = {AnnotationTarget.VALUE_PARAMETER}) @kotlin.annotation.Retention(value = AnnotationRetention.BINARY) public final annotation class Frozen : kotlin.Annotation {
                public constructor Frozen()
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
        }
    }
}
