/*
 * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package com.jetbrains.kmm.wizard

import com.android.tools.idea.gradle.util.LocalProperties
import com.android.tools.idea.sdk.SdkPaths
import com.android.tools.idea.util.toIoFile
import com.intellij.openapi.vfs.LocalFileSystem
import com.intellij.openapi.vfs.VirtualFile
import com.intellij.testFramework.PlatformTestUtil
import org.jetbrains.kotlin.test.KotlinTestUtils
import org.jetbrains.kotlin.test.testFramework.runWriteAction
import org.jetbrains.kotlin.tools.projectWizard.cli.BuildSystem
import org.jetbrains.kotlin.tools.projectWizard.cli.assertSuccess
import org.jetbrains.kotlin.tools.projectWizard.phases.GenerationPhase
import org.jetbrains.kotlin.tools.projectWizard.wizard.AbstractNewWizardProjectImportTest
import org.jetbrains.kotlin.tools.projectWizard.wizard.Wizard
import org.jetbrains.kotlin.tools.projectWizard.wizard.services.TestWizardServices
import java.io.File
import java.nio.charset.StandardCharsets
import java.nio.file.Files
import java.nio.file.Path

class KmmWizardTemplateGenerationTest : AbstractNewWizardProjectImportTest() {

    // this directory contains reference result of wizard execution
    private val testdataExpectedDir = File("testData/wizard/expected")
    private lateinit var testdataExpectedVfs: VirtualFile

    // these files are supposed to be generated by Android Studio before KmmWizard execution
    private val testdataPrerequisitesDir = File("testData/wizard/prerequisites")
    private lateinit var testdataPrerequisitesVfs: VirtualFile

    private lateinit var androidSdkDir: File

    private fun projectDescriptionFor(destination: File) = ProjectDescription(
        "TestApplication",
        destination.toPath(),
        "app",
        "org.jetbrains",
        androidSdkDir.toPath()
    )

    private fun generateLocalProperties(destination: VirtualFile) = runWriteAction {
        val localProperties = "sdk.dir=$androidSdkDir\n"

        destination.createChildData(this, "local.properties").apply {
            setBinaryContent(
                localProperties.toByteArray(StandardCharsets.UTF_8),
                modificationStamp,
                timeStamp
            )
        }
    }

    private fun refreshAndCopy(source: VirtualFile, destination: VirtualFile) {
        // dir requires refresh prior being copied
        Files.walk(source.toIoFile().toPath())
            .filter { path -> Files.isDirectory(path) }
            .forEach { path -> synchronizeTempDirVfs(path) }

        copyDirContentsTo(source, destination)
    }

    override fun setUp() {
        super.setUp()
        assertTrue("Test environment is broken: expectedDir is absent", testdataExpectedDir.exists())
        assertTrue("Test environment is broken: prerequisitesDir is absent", testdataPrerequisitesDir.exists())

        testdataExpectedVfs = LocalFileSystem.getInstance().findFileByIoFile(testdataExpectedDir)!!
        testdataPrerequisitesVfs = LocalFileSystem.getInstance().findFileByIoFile(testdataPrerequisitesDir)!!

        androidSdkDir = KotlinTestUtils.findAndroidSdk()
        assertNotNull("Android SDK is not found", androidSdkDir)
    }

    fun testGenerationIntact() {
        val generationActualDir = KotlinTestUtils.tmpDir("generationActual")
        val generationActualVfs = LocalFileSystem.getInstance().findFileByIoFile(generationActualDir)!!

        val generationExpectedDir = KotlinTestUtils.tmpDir("generationExpected")
        val generationExpectedVfs = LocalFileSystem.getInstance().findFileByIoFile(generationExpectedDir)!!

        generateLocalProperties(generationExpectedVfs)

        refreshAndCopy(testdataPrerequisitesVfs, generationExpectedVfs)
        refreshAndCopy(testdataExpectedVfs, generationExpectedVfs)

        refreshAndCopy(testdataPrerequisitesVfs, generationActualVfs)

        val wizard = KmmWizard(projectDescriptionFor(generationActualDir), true)

        wizard.apply(
            WizardConfiguration.commonServices + WizardConfiguration.productionServices,
            GenerationPhase.ALL
        ).assertSuccess()

        PlatformTestUtil.assertDirectoriesEqual(generationExpectedVfs, generationActualVfs)
    }

    fun testImport() {
        val importDir = KotlinTestUtils.tmpDir("import")
        val importVfs = LocalFileSystem.getInstance().findFileByIoFile(importDir)!!

        refreshAndCopy(testdataPrerequisitesVfs, importVfs)

        prepareGradleBuildSystem(importDir.toPath())

        val wizard = KmmWizard(projectDescriptionFor(importDir), true)

        wizard.apply(
            WizardConfiguration.commonServices + TestWizardServices.createProjectDependent(project),
            GenerationPhase.ALL
        ).assertSuccess()

        // Gradle import does not check correctness of specified Android Sdk location

        val projectAndroidSdkPath = LocalProperties(importDir).androidSdkPath
        val androidSdkValidation = SdkPaths.validateAndroidSdk(projectAndroidSdkPath, true)

        assertTrue("Wizard generated invalid Android SDK: " + androidSdkValidation.message, androidSdkValidation.success)
    }

    override fun createWizard(directory: Path, buildSystem: BuildSystem, projectDirectory: Path): Wizard {
        TODO("Not needed")
    }
}

