/*
 * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.idea.frontend.old

import org.jetbrains.kotlin.builtins.DefaultBuiltIns
import org.jetbrains.kotlin.builtins.KotlinBuiltIns
import org.jetbrains.kotlin.descriptors.*
import org.jetbrains.kotlin.descriptors.annotations.Annotations
import org.jetbrains.kotlin.idea.caches.project.IdeaModuleInfo
import org.jetbrains.kotlin.idea.caches.project.getModuleInfo
import org.jetbrains.kotlin.idea.frontend.api.KtAnalysisSession
import org.jetbrains.kotlin.name.FqName
import org.jetbrains.kotlin.name.Name
import org.jetbrains.kotlin.platform.TargetPlatform
import org.jetbrains.kotlin.psi.KtElement

interface KtSymbolBasedContext {
    val builtIns: KotlinBuiltIns
    val ktAnalysisSession: KtAnalysisSession
    val moduleDescriptor: ModuleDescriptor

    /**
     * Legend:
     *  - where was decided, that KtSymbolBased descriptor is not support method, noImplementation() method is called.
     *  - where the implementation planned, but not yet here: implementationPlanned()
     *  - if there is no simple implementation and it isn't clear if it really needed -- implementationPostponed()
     *  - if there were no investigation -- autogenerated TODO("not implemented") called
     *  - if we could implement it right now, but not entirely correct -- wrap it into incorrect implementation
     */
    fun noImplementation(additionalInfo: String = ""): Nothing
    fun implementationPostponed(additionalInfo: String = ""): Nothing
    fun implementationPlanned(additionalInfo: String = ""): Nothing

    fun <R> incorrectImplementation(block: () -> R) = block()
}

class KtSymbolBasedContextImpl(
    val ktElementsToAnalyze: Collection<KtElement>
): KtSymbolBasedContext {
    override val builtIns: KotlinBuiltIns
        get() = incorrectImplementation { DefaultBuiltIns.Instance }

    val moduleInfo = ktElementsToAnalyze.first().getModuleInfo()

    override fun noImplementation(additionalInfo: String): Nothing =
        error("This method should not be called for wrappers. $additionalInfo")

    override fun implementationPostponed(additionalInfo: String): Nothing =
        TODO("InvestigateLater and implement if needed. $additionalInfo")

    override fun implementationPlanned(additionalInfo: String): Nothing =
        TODO("SE_to_implement. $additionalInfo")
}

private class KtSymbolBasedModuleDescriptorImpl(
    val context: KtSymbolBasedContext,
    val moduleInfo: IdeaModuleInfo
) : ModuleDescriptor {
    override val builtIns: KotlinBuiltIns
        get() = context.builtIns

    override val stableName: Name?
        get() = context.noImplementation()
    override val platform: TargetPlatform?
        get() = moduleInfo.platform

    override fun shouldSeeInternalsOf(targetModule: ModuleDescriptor): Boolean = context.noImplementation()
    override fun getPackage(fqName: FqName): PackageViewDescriptor = context.noImplementation()
    override fun getSubPackagesOf(fqName: FqName, nameFilter: (Name) -> Boolean): Collection<FqName> = context.noImplementation()

    override val allDependencyModules: List<ModuleDescriptor>
        get() = TODO("Not yet implemented")
    override val expectedByModules: List<ModuleDescriptor>
        get() = TODO("Not yet implemented")
    override val allExpectedByModules: Set<ModuleDescriptor>
        get() = TODO("Not yet implemented")

    override fun <T> getCapability(capability: ModuleCapability<T>): T? {
        TODO("Not yet implemented")
    }

    override val isValid: Boolean
        get() = TODO("Not yet implemented")

    override fun assertValid() {
        TODO("Not yet implemented")
    }

    override fun getName(): Name {
        TODO("Not yet implemented")
    }

    override fun getOriginal(): DeclarationDescriptor {
        TODO("Not yet implemented")
    }

    override fun acceptVoid(visitor: DeclarationDescriptorVisitor<Void, Void>?) {
        TODO("Not yet implemented")
    }

    override val annotations: Annotations
        get() = TODO("Not yet implemented")

}