--------
- @kotlin.js.library(name = "arrayDeepEquals")
--------
- @kotlin.js.library(name = "arrayDeepHashCode")
--------
- @kotlin.js.library(name = "arrayDeepToString")
--------
- @kotlin.js.library(name = "arrayEquals")
--------
- @kotlin.js.library(name = "arrayEquals")
--------
- @kotlin.js.library(name = "arrayEquals")
--------
- @kotlin.js.library(name = "arrayEquals")
--------
- @kotlin.js.library(name = "arrayEquals")
--------
- @kotlin.js.library(name = "arrayEquals")
--------
- @kotlin.js.library(name = "arrayEquals")
--------
- @kotlin.js.library(name = "arrayEquals")
--------
- @kotlin.js.library(name = "arrayEquals")
--------
- @kotlin.js.library(name = "arrayHashCode")
--------
- @kotlin.js.library(name = "arrayHashCode")
--------
- @kotlin.js.library(name = "arrayHashCode")
--------
- @kotlin.js.library(name = "arrayHashCode")
--------
- @kotlin.js.library(name = "arrayHashCode")
--------
- @kotlin.js.library(name = "arrayHashCode")
--------
- @kotlin.js.library(name = "arrayHashCode")
--------
- @kotlin.js.library(name = "arrayHashCode")
--------
- @kotlin.js.library(name = "arrayHashCode")
--------
- @kotlin.js.library(name = "arrayToString")
--------
- @kotlin.js.library(name = "arrayToString")
--------
- @kotlin.js.library(name = "arrayToString")
--------
- @kotlin.js.library(name = "arrayToString")
--------
- @kotlin.js.library(name = "arrayToString")
--------
- @kotlin.js.library(name = "arrayToString")
--------
- @kotlin.js.library(name = "arrayToString")
--------
- @kotlin.js.library(name = "arrayToString")
--------
- @kotlin.js.library(name = "arrayToString")
--------
- @kotlin.js.library(name = "primitiveArraySort")
--------
- @kotlin.js.library(name = "primitiveArraySort")
--------
- @kotlin.js.library(name = "primitiveArraySort")
--------
- @kotlin.js.library(name = "primitiveArraySort")
--------
- @kotlin.js.library(name = "primitiveArraySort")
--------
- @kotlin.js.library(name = "primitiveArraySort")
--------
- public abstract class BooleanIterator : kotlin.collections.Iterator<kotlin.Boolean> {
-     public constructor BooleanIterator()
- 
-     public final override operator fun next(): kotlin.Boolean
- 
-     public abstract fun nextBoolean(): kotlin.Boolean
- }
- 
--------
- public abstract class ByteIterator : kotlin.collections.Iterator<kotlin.Byte> {
-     public constructor ByteIterator()
- 
-     public final override operator fun next(): kotlin.Byte
- 
-     public abstract fun nextByte(): kotlin.Byte
- }
- 
--------
- public abstract class CharIterator : kotlin.collections.Iterator<kotlin.Char> {
-     public constructor CharIterator()
- 
-     public final override operator fun next(): kotlin.Char
- 
-     public abstract fun nextChar(): kotlin.Char
- }
- 
--------
- public interface Collection<out E> : kotlin.collections.Iterable<E> {
-     public abstract val size: kotlin.Int { get; }
- 
-     public abstract operator fun contains(element: E): kotlin.Boolean
- 
-     public abstract fun containsAll(elements: kotlin.collections.Collection<E>): kotlin.Boolean
- 
-     public abstract fun isEmpty(): kotlin.Boolean
- 
-     public abstract override operator fun iterator(): kotlin.collections.Iterator<E>
- }
- 
--------
- public abstract class DoubleIterator : kotlin.collections.Iterator<kotlin.Double> {
-     public constructor DoubleIterator()
- 
-     public final override operator fun next(): kotlin.Double
- 
-     public abstract fun nextDouble(): kotlin.Double
- }
- 
--------
- public abstract class FloatIterator : kotlin.collections.Iterator<kotlin.Float> {
-     public constructor FloatIterator()
- 
-     public final override operator fun next(): kotlin.Float
- 
-     public abstract fun nextFloat(): kotlin.Float
- }
- 
--------
- public abstract class IntIterator : kotlin.collections.Iterator<kotlin.Int> {
-     public constructor IntIterator()
- 
-     public final override operator fun next(): kotlin.Int
- 
-     public abstract fun nextInt(): kotlin.Int
- }
- 
--------
- public interface Iterable<out T> {
-     public abstract operator fun iterator(): kotlin.collections.Iterator<T>
- }
- 
--------
- public interface Iterator<out T> {
-     public abstract operator fun hasNext(): kotlin.Boolean
- 
-     public abstract operator fun next(): T
- }
- 
--------
- public interface List<out E> : kotlin.collections.Collection<E> {
-     public abstract override val size: kotlin.Int { get; }
- 
-     public abstract override operator fun contains(element: E): kotlin.Boolean
- 
-     public abstract override fun containsAll(elements: kotlin.collections.Collection<E>): kotlin.Boolean
- 
-     public abstract operator fun get(index: kotlin.Int): E
- 
-     public abstract fun indexOf(element: E): kotlin.Int
- 
-     public abstract override fun isEmpty(): kotlin.Boolean
- 
-     public abstract override operator fun iterator(): kotlin.collections.Iterator<E>
- 
-     public abstract fun lastIndexOf(element: E): kotlin.Int
- 
-     public abstract fun listIterator(): kotlin.collections.ListIterator<E>
- 
-     public abstract fun listIterator(index: kotlin.Int): kotlin.collections.ListIterator<E>
- 
-     public abstract fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.List<E>
- }
- 
--------
- public interface ListIterator<out T> : kotlin.collections.Iterator<T> {
-     public abstract override operator fun hasNext(): kotlin.Boolean
- 
-     public abstract fun hasPrevious(): kotlin.Boolean
- 
-     public abstract override operator fun next(): T
- 
-     public abstract fun nextIndex(): kotlin.Int
- 
-     public abstract fun previous(): T
- 
-     public abstract fun previousIndex(): kotlin.Int
- }
- 
--------
- public abstract class LongIterator : kotlin.collections.Iterator<kotlin.Long> {
-     public constructor LongIterator()
- 
-     public final override operator fun next(): kotlin.Long
- 
-     public abstract fun nextLong(): kotlin.Long
- }
- 
--------
- public interface Map<K, out V> {
-     public abstract val entries: kotlin.collections.Set<kotlin.collections.Map.Entry<K, V>> { get; }
- 
-     public abstract val keys: kotlin.collections.Set<K> { get; }
- 
-     public abstract val size: kotlin.Int { get; }
- 
-     public abstract val values: kotlin.collections.Collection<V> { get; }
- 
-     public abstract fun containsKey(key: K): kotlin.Boolean
- 
-     public abstract fun containsValue(value: V): kotlin.Boolean
- 
-     public abstract operator fun get(key: K): V?
- 
-     public abstract fun isEmpty(): kotlin.Boolean
- 
-     public interface Entry<out K, out V> {
-         public abstract val key: K { get; }
- 
-         public abstract val value: V { get; }
-     }
- }
- 
--------
- public interface MutableCollection<E> : kotlin.collections.Collection<E>, kotlin.collections.MutableIterable<E> {
-     public abstract fun add(element: E): kotlin.Boolean
- 
-     public abstract fun addAll(elements: kotlin.collections.Collection<E>): kotlin.Boolean
- 
-     public abstract fun clear(): kotlin.Unit
- 
-     public abstract override operator fun iterator(): kotlin.collections.MutableIterator<E>
- 
-     public abstract fun remove(element: E): kotlin.Boolean
- 
-     public abstract fun removeAll(elements: kotlin.collections.Collection<E>): kotlin.Boolean
- 
-     public abstract fun retainAll(elements: kotlin.collections.Collection<E>): kotlin.Boolean
- }
- 
--------
- public interface MutableIterable<out T> : kotlin.collections.Iterable<T> {
-     public abstract override operator fun iterator(): kotlin.collections.MutableIterator<T>
- }
- 
--------
- public interface MutableIterator<out T> : kotlin.collections.Iterator<T> {
-     public abstract fun remove(): kotlin.Unit
- }
- 
--------
- public interface MutableList<E> : kotlin.collections.List<E>, kotlin.collections.MutableCollection<E> {
-     public abstract override fun add(element: E): kotlin.Boolean
- 
-     public abstract fun add(index: kotlin.Int, element: E): kotlin.Unit
- 
-     public abstract fun addAll(index: kotlin.Int, elements: kotlin.collections.Collection<E>): kotlin.Boolean
- 
-     public abstract override fun addAll(elements: kotlin.collections.Collection<E>): kotlin.Boolean
- 
-     public abstract override fun clear(): kotlin.Unit
- 
-     public abstract override fun listIterator(): kotlin.collections.MutableListIterator<E>
- 
-     public abstract override fun listIterator(index: kotlin.Int): kotlin.collections.MutableListIterator<E>
- 
-     public abstract override fun remove(element: E): kotlin.Boolean
- 
-     public abstract override fun removeAll(elements: kotlin.collections.Collection<E>): kotlin.Boolean
- 
-     public abstract fun removeAt(index: kotlin.Int): E
- 
-     public abstract override fun retainAll(elements: kotlin.collections.Collection<E>): kotlin.Boolean
- 
-     public abstract operator fun set(index: kotlin.Int, element: E): E
- 
-     public abstract override fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<E>
- }
- 
--------
- public interface MutableListIterator<T> : kotlin.collections.ListIterator<T>, kotlin.collections.MutableIterator<T> {
-     public abstract fun add(element: T): kotlin.Unit
- 
-     public abstract override operator fun hasNext(): kotlin.Boolean
- 
-     public abstract override operator fun next(): T
- 
-     public abstract override fun remove(): kotlin.Unit
- 
-     public abstract fun set(element: T): kotlin.Unit
- }
- 
--------
- public interface MutableMap<K, V> : kotlin.collections.Map<K, V> {
-     public abstract override val entries: kotlin.collections.MutableSet<kotlin.collections.MutableMap.MutableEntry<K, V>> { get; }
- 
-     public abstract override val keys: kotlin.collections.MutableSet<K> { get; }
- 
-     public abstract override val values: kotlin.collections.MutableCollection<V> { get; }
- 
-     public abstract fun clear(): kotlin.Unit
- 
-     public abstract fun put(key: K, value: V): V?
- 
-     public abstract fun putAll(from: kotlin.collections.Map<out K, V>): kotlin.Unit
- 
-     public abstract fun remove(key: K): V?
- 
-     public interface MutableEntry<K, V> : kotlin.collections.Map.Entry<K, V> {
-         public abstract fun setValue(newValue: V): V
-     }
- }
- 
--------
- public interface MutableSet<E> : kotlin.collections.Set<E>, kotlin.collections.MutableCollection<E> {
-     public abstract override fun add(element: E): kotlin.Boolean
- 
-     public abstract override fun addAll(elements: kotlin.collections.Collection<E>): kotlin.Boolean
- 
-     public abstract override fun clear(): kotlin.Unit
- 
-     public abstract override operator fun iterator(): kotlin.collections.MutableIterator<E>
- 
-     public abstract override fun remove(element: E): kotlin.Boolean
- 
-     public abstract override fun removeAll(elements: kotlin.collections.Collection<E>): kotlin.Boolean
- 
-     public abstract override fun retainAll(elements: kotlin.collections.Collection<E>): kotlin.Boolean
- }
- 
--------
- public interface Set<out E> : kotlin.collections.Collection<E> {
-     public abstract override val size: kotlin.Int { get; }
- 
-     public abstract override operator fun contains(element: E): kotlin.Boolean
- 
-     public abstract override fun containsAll(elements: kotlin.collections.Collection<E>): kotlin.Boolean
- 
-     public abstract override fun isEmpty(): kotlin.Boolean
- 
-     public abstract override operator fun iterator(): kotlin.collections.Iterator<E>
- }
- 
--------
- public abstract class ShortIterator : kotlin.collections.Iterator<kotlin.Short> {
-     public constructor ShortIterator()
- 
-     public final override operator fun next(): kotlin.Short
- 
-     public abstract fun nextShort(): kotlin.Short
- }
- 