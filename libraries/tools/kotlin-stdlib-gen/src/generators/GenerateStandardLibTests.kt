/*
 * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package generators

import templates.*
import templates.test.*
import java.io.File
import java.io.FileWriter

/**
 * Generates methods in the standard library which are mostly identical
 * but just using a different input kind.
 *
 * Kinda like mimicking source macros here, but this avoids the inefficiency of type conversions
 * at runtime.
 */
fun main(args: Array<String>) {
    val templateGroups = sequenceOf(
        AggregatesTest,
        NumbersTest,
        ComparablesTest,
        ElementsTest,
        ArraysTest,
        OrderingTest
    )

    templateGroups.generateSources(args, TestGeneratorStrategy())
}


private class TestGeneratorStrategy : SourceGeneratorStrategy<TestBuilder> {
    override val supportedTargets: List<KotlinTarget>
        get() = listOf(KotlinTarget.Common)

    override fun baseDir(target: KotlinTarget): String = when (target) {
        KotlinTarget.Common -> "libraries/stdlib/test/generated"
//        KotlinTarget.JVM -> "libraries/stdlib/jvm/test/generated"
//        KotlinTarget.JS -> "libraries/stdlib/js/test/generated"
//        KotlinTarget.JS_IR -> "libraries/stdlib/js-ir/test/generated"
        else -> error("Invalid target: $target")
    }

    override fun fileName(target: KotlinTarget, source: SourceFile): String {
        val platformSuffix = if (target.platform == Platform.Common) "" else target.platform.name
        return "_${source.name.capitalize() + platformSuffix}Test.kt"
    }

    override val writer: TemplateWriter<TestBuilder>
        get() = TestWriter()
}

private class TestWriter : TemplateWriter<TestBuilder> {
    override fun writeTo(file: File, builders: List<TestBuilder>, targetedSource: TargetedSourceFile) {
        val (target, sourceFile) = targetedSource
        println("Generating file: $file")
        file.parentFile.mkdirs()
        FileWriter(file).use { writer ->
            writer.appendln(copyrightNotice())

            writer.append("package ${sourceFile.testPackageName ?: "test"}\n\n")
            writer.append("${autogeneratedWarning("GenerateStandardLibTests.kt")}\n\n")

            if (sourceFile in setOf(SourceFile.Arrays, SourceFile.Sequences, SourceFile.Collections)) {
                writer.appendLine("import test.comparisons.STRING_CASE_INSENSITIVE_ORDER")
            }
            if (sourceFile in setOf(
                    SourceFile.Primitives,
                    SourceFile.Unsigned,
                    SourceFile.Comparisons,
                    SourceFile.UComparisons,
                    SourceFile.Arrays,
                    SourceFile.UArrays,
                    SourceFile.Collections
                )
            ) {
                writer.appendLine("import kotlin.random.*")
            }
            if (sourceFile == SourceFile.Arrays || sourceFile == SourceFile.UArrays) {
                writer.appendLine("import test.assertArrayContentEquals")
            }
            if (sourceFile == SourceFile.Sequences) {
                writer.appendLine("import test.collections.assertSorted")
            }

            writer.append("import kotlin.test.*\n\n")

            writer.append("class ${file.nameWithoutExtension} {\n")

            for (f in builders) {
                f.build(writer)
            }

            writer.append("}\n")
        }
    }
}