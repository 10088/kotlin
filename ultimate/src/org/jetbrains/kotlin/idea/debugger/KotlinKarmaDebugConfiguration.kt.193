/*
 * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.idea.debugger

import com.intellij.execution.ExecutionResult
import com.intellij.execution.Executor
import com.intellij.execution.configuration.EmptyRunProfileState
import com.intellij.execution.configurations.*
import com.intellij.execution.runners.ExecutionEnvironment
import com.intellij.openapi.options.SettingsEditor
import com.intellij.openapi.project.Project
import com.intellij.xdebugger.XDebugProcess
import com.intellij.xdebugger.XDebugSession
import com.jetbrains.debugger.wip.JSRemoteDebugConfiguration
import org.jetbrains.debugger.DebuggableRunConfiguration
import java.net.InetSocketAddress

class KotlinKarmaDebugConfiguration(
    project: Project,
    factory: ConfigurationFactory,
    name: String
) : LocatableConfigurationBase<Any>(project, factory, name),
    DebuggableRunConfiguration {
    private val jsRemoteDebugConfiguration = JSRemoteDebugConfiguration(project, factory, name)

    override fun createDebugProcess(
        socketAddress: InetSocketAddress,
        session: XDebugSession,
        executionResult: ExecutionResult?,
        environment: ExecutionEnvironment
    ): XDebugProcess {
        return jsRemoteDebugConfiguration.createDebugProcess(
            socketAddress,
            session,
            executionResult,
            environment
        )
    }

    override fun canRun(executorId: String, profile: RunProfile): Boolean {
        return super.canRun(executorId, profile) && profile is KotlinKarmaDebugConfiguration
    }

    override fun getConfigurationEditor(): SettingsEditor<out RunConfiguration> {
        return jsRemoteDebugConfiguration.configurationEditor
    }

    override fun getState(executor: Executor, env: ExecutionEnvironment): RunProfileState? {
        return EmptyRunProfileState.INSTANCE
    }
}