/*
 * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.idea.debugger

import com.intellij.execution.configurations.RunProfile
import com.intellij.execution.configurations.RunProfileState
import com.intellij.execution.configurations.RunnerSettings
import com.intellij.execution.runners.AsyncProgramRunner
import com.intellij.execution.runners.ExecutionEnvironment
import com.intellij.execution.ui.RunContentDescriptor
import com.intellij.javascript.debugger.execution.DebuggableProgramRunner
import com.intellij.notification.Notification
import com.intellij.notification.NotificationDisplayType
import com.intellij.notification.NotificationType
import com.intellij.notification.Notifications
import org.jetbrains.concurrency.Promise

class KotlinKarmaDebugProgramRunner : AsyncProgramRunner<RunnerSettings>() {
    init {
        Notifications.Bus.register("hello-my", NotificationDisplayType.BALLOON)
    }

    private val debuggableProgramRunner = MyDebuggableProgramRunner()

    override fun canRun(executorId: String, profile: RunProfile): Boolean {
        return debuggableProgramRunner.canRun(executorId, profile)
    }

    override fun execute(environment: ExecutionEnvironment, state: RunProfileState): Promise<RunContentDescriptor?> {
        Notifications.Bus.notify(Notification("hello-my", "HELLO2", "World", NotificationType.INFORMATION))

        return debuggableProgramRunner.execute(environment, state)
    }

    override fun getRunnerId(): String {
        return "kotlinKarmaDebuggableProgram"
    }
}

class MyDebuggableProgramRunner : DebuggableProgramRunner() {
    public override fun execute(environment: ExecutionEnvironment, state: RunProfileState): Promise<RunContentDescriptor?> {
        return super.execute(environment, state)
    }
}