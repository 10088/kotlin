/*
 * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.idea.spring.tests.rename;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("kotlin-ultimate/ultimate/testData/spring/core/rename")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class SpringRenameTestGenerated extends AbstractSpringRenameTest {
    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInRename() throws Exception {
        KotlinTestUtils.assertAllTestsPresentInSingleGeneratedClass(this.getClass(), new File("kotlin-ultimate/ultimate/testData/spring/core/rename"), Pattern.compile("^(.+)\\.test$"));
    }

    @TestMetadata("annotationArgBySpELRefInXMLConf/annotationArgBySpELRefInXMLConf.test")
    public void testAnnotationArgBySpELRefInXMLConf_AnnotationArgBySpELRefInXMLConf() throws Exception {
        runTest("kotlin-ultimate/ultimate/testData/spring/core/rename/annotationArgBySpELRefInXMLConf/annotationArgBySpELRefInXMLConf.test");
    }

    @TestMetadata("classWithXmlRefs/classWithXmlRef.test")
    public void testClassWithXmlRefs_ClassWithXmlRef() throws Exception {
        runTest("kotlin-ultimate/ultimate/testData/spring/core/rename/classWithXmlRefs/classWithXmlRef.test");
    }

    @TestMetadata("classWithXmlRefsByRef/classWithXmlRefByRef.test")
    public void testClassWithXmlRefsByRef_ClassWithXmlRefByRef() throws Exception {
        runTest("kotlin-ultimate/ultimate/testData/spring/core/rename/classWithXmlRefsByRef/classWithXmlRefByRef.test");
    }

    @TestMetadata("factoryMethodParam/factoryMethodParam.test")
    public void testFactoryMethodParam_FactoryMethodParam() throws Exception {
        runTest("kotlin-ultimate/ultimate/testData/spring/core/rename/factoryMethodParam/factoryMethodParam.test");
    }

    @TestMetadata("factoryMethodParamByXmlRef/factoryMethodParamByXmlRef.test")
    public void testFactoryMethodParamByXmlRef_FactoryMethodParamByXmlRef() throws Exception {
        runTest("kotlin-ultimate/ultimate/testData/spring/core/rename/factoryMethodParamByXmlRef/factoryMethodParamByXmlRef.test");
    }

    @TestMetadata("isPropertyWithXmlRefsBySpelRef/isPropertyWithXmlRefBySpelRef.test")
    public void testIsPropertyWithXmlRefsBySpelRef_IsPropertyWithXmlRefBySpelRef() throws Exception {
        runTest("kotlin-ultimate/ultimate/testData/spring/core/rename/isPropertyWithXmlRefsBySpelRef/isPropertyWithXmlRefBySpelRef.test");
    }

    @TestMetadata("javaSpelRefToJava/javaSpelRefToJava.test")
    public void testJavaSpelRefToJava_JavaSpelRefToJava() throws Exception {
        runTest("kotlin-ultimate/ultimate/testData/spring/core/rename/javaSpelRefToJava/javaSpelRefToJava.test");
    }

    @TestMetadata("javaSpelRefToJavaAnnotated/javaSpelRefToJavaAnnotated.test")
    public void testJavaSpelRefToJavaAnnotated_JavaSpelRefToJavaAnnotated() throws Exception {
        runTest("kotlin-ultimate/ultimate/testData/spring/core/rename/javaSpelRefToJavaAnnotated/javaSpelRefToJavaAnnotated.test");
    }

    @TestMetadata("javaSpelRefToKt/javaSpelRefToKt.test")
    public void testJavaSpelRefToKt_JavaSpelRefToKt() throws Exception {
        runTest("kotlin-ultimate/ultimate/testData/spring/core/rename/javaSpelRefToKt/javaSpelRefToKt.test");
    }

    @TestMetadata("javaSpelRefToKtAnnotated/javaSpelRefToKtAnnotated.test")
    public void testJavaSpelRefToKtAnnotated_JavaSpelRefToKtAnnotated() throws Exception {
        runTest("kotlin-ultimate/ultimate/testData/spring/core/rename/javaSpelRefToKtAnnotated/javaSpelRefToKtAnnotated.test");
    }

    @TestMetadata("ktSpelRefToJava/ktSpelRefToJava.test")
    public void testKtSpelRefToJava_KtSpelRefToJava() throws Exception {
        runTest("kotlin-ultimate/ultimate/testData/spring/core/rename/ktSpelRefToJava/ktSpelRefToJava.test");
    }

    @TestMetadata("ktSpelRefToJavaAnnotated/ktSpelRefToJavaAnnotated.test")
    public void testKtSpelRefToJavaAnnotated_KtSpelRefToJavaAnnotated() throws Exception {
        runTest("kotlin-ultimate/ultimate/testData/spring/core/rename/ktSpelRefToJavaAnnotated/ktSpelRefToJavaAnnotated.test");
    }

    @TestMetadata("ktSpelRefToKt/ktSpelRefToKt.test")
    public void testKtSpelRefToKt_KtSpelRefToKt() throws Exception {
        runTest("kotlin-ultimate/ultimate/testData/spring/core/rename/ktSpelRefToKt/ktSpelRefToKt.test");
    }

    @TestMetadata("ktSpelRefToKtAnnotated/ktSpelRefToKtAnnotated.test")
    public void testKtSpelRefToKtAnnotated_KtSpelRefToKtAnnotated() throws Exception {
        runTest("kotlin-ultimate/ultimate/testData/spring/core/rename/ktSpelRefToKtAnnotated/ktSpelRefToKtAnnotated.test");
    }

    @TestMetadata("parameterWithXmlRefsBySpelRef/parameterWithXmlRefBySpelRef.test")
    public void testParameterWithXmlRefsBySpelRef_ParameterWithXmlRefBySpelRef() throws Exception {
        runTest("kotlin-ultimate/ultimate/testData/spring/core/rename/parameterWithXmlRefsBySpelRef/parameterWithXmlRefBySpelRef.test");
    }

    @TestMetadata("primaryConstructorArgWithXmlRefs/primaryConstructorArgWithXmlRef.test")
    public void testPrimaryConstructorArgWithXmlRefs_PrimaryConstructorArgWithXmlRef() throws Exception {
        runTest("kotlin-ultimate/ultimate/testData/spring/core/rename/primaryConstructorArgWithXmlRefs/primaryConstructorArgWithXmlRef.test");
    }

    @TestMetadata("primaryConstructorArgWithXmlRefsByRef1/primaryConstructorArgWithXmlRefByRef1.test")
    public void testPrimaryConstructorArgWithXmlRefsByRef1_PrimaryConstructorArgWithXmlRefByRef1() throws Exception {
        runTest("kotlin-ultimate/ultimate/testData/spring/core/rename/primaryConstructorArgWithXmlRefsByRef1/primaryConstructorArgWithXmlRefByRef1.test");
    }

    @TestMetadata("primaryConstructorArgWithXmlRefsByRef2/primaryConstructorArgWithXmlRefByRef2.test")
    public void testPrimaryConstructorArgWithXmlRefsByRef2_PrimaryConstructorArgWithXmlRefByRef2() throws Exception {
        runTest("kotlin-ultimate/ultimate/testData/spring/core/rename/primaryConstructorArgWithXmlRefsByRef2/primaryConstructorArgWithXmlRefByRef2.test");
    }

    @TestMetadata("propertyWithXmlRefs/propertyWithXmlRef.test")
    public void testPropertyWithXmlRefs_PropertyWithXmlRef() throws Exception {
        runTest("kotlin-ultimate/ultimate/testData/spring/core/rename/propertyWithXmlRefs/propertyWithXmlRef.test");
    }

    @TestMetadata("propertyWithXmlRefsByRef/propertyWithXmlRefByRef.test")
    public void testPropertyWithXmlRefsByRef_PropertyWithXmlRefByRef() throws Exception {
        runTest("kotlin-ultimate/ultimate/testData/spring/core/rename/propertyWithXmlRefsByRef/propertyWithXmlRefByRef.test");
    }

    @TestMetadata("propertyWithXmlRefsBySpelRef/propertyWithXmlRefBySpelRef.test")
    public void testPropertyWithXmlRefsBySpelRef_PropertyWithXmlRefBySpelRef() throws Exception {
        runTest("kotlin-ultimate/ultimate/testData/spring/core/rename/propertyWithXmlRefsBySpelRef/propertyWithXmlRefBySpelRef.test");
    }

    @TestMetadata("setterFunWithXmlRefs/setterFunWithXmlRef.test")
    public void testSetterFunWithXmlRefs_SetterFunWithXmlRef() throws Exception {
        runTest("kotlin-ultimate/ultimate/testData/spring/core/rename/setterFunWithXmlRefs/setterFunWithXmlRef.test");
    }

    @TestMetadata("setterFunWithXmlRefsByRef/setterFunWithXmlRefByRef.test")
    public void testSetterFunWithXmlRefsByRef_SetterFunWithXmlRefByRef() throws Exception {
        runTest("kotlin-ultimate/ultimate/testData/spring/core/rename/setterFunWithXmlRefsByRef/setterFunWithXmlRefByRef.test");
    }
}
